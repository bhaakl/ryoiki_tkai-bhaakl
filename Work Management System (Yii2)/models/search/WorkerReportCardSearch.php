<?php


namespace app\models\search;

use app\models\User;
use app\models\WorkerReportCard;
use app\models\WorkerReportCardWorker;
use Yii;
use yii\data\ActiveDataProvider;
use yii\helpers\ArrayHelper;

class WorkerReportCardSearch extends WorkerReportCard
{
    const TYPE_PLAN = 'plan';
    const TYPE_FACT = 'fact';

    const TYPES = [
        self::TYPE_FACT => 'Факт',
        self::TYPE_PLAN => 'План',
    ];

    private $modelsToSave = [];

    public $type = self::TYPE_FACT;
    public $worker_id;
    public $worker_job_id;
    public $worker_division_id;

    public function rules(): array
    {
        return [
            [['work_date'], 'required'],
            [['worker_id'], 'integer'],
            [['type'], 'string'],
            [['work_date', 'worker_hours', 'worker_units'], 'safe']
        ];
    }

    public function save($runValidation = true, $attributeNames = null)
    {
        foreach ($this->modelsToSave as $model) {
            $model->save();
        }
        return true;
//        return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }

    public function init()
    {
        parent::init();
        $this->work_date = date('Y-m-d');
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels(): array
    {
        return [
            'totalHours' => Yii::t('app', 'Всего часов'),
            'totalMade' => Yii::t('app', 'Всего сделано'),
            'madeInMinute' => Yii::t('app', 'ед/мин'),
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function search($params, $recsOnPage = 0): \yii\data\ActiveDataProvider
    {
        // $this->load($params);
        // static::prepareRecords($this->work_date);
        $query = self::find();
        Yii::info('WorkerReportCardSearch : ' . print_r($query, true), 'debug');

        // $query->joinWith('workers.units');
        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort' => $this->sortingEnabled ? ['defaultOrder' => $this->defaultOrder] : false,
            'pagination' => false,
        ]);

        $query = $dataProvider->query;
        
        // $query->where(['work_date' => $this->work_date]);
        if (isset($params['worker_id']))
            $query->andFilterWhere([WorkerReportCardWorker::tableName().'.user_id' => $params['worker_id']]);

        return $dataProvider;
    }

    public function getValueAttribute()
    {
        return 'value_'.$this->type;
    }

    public function getHoursAttribute()
    {
        return 'hours_'.$this->type;
    }

    public function getTotalHours(): int
    {
        return array_sum(ArrayHelper::getColumn($this->workers, 'hours'));
    }

    public function getTotalMade(): array
    {
        $result = [];
        $valueAttribute = $this->getValueAttribute();
        foreach ($this->workers as $worker) {
            foreach ($worker->units as $unit) {
                $result[$unit->measure_unit_id] = key_exists($unit->measure_unit_id, $result) ? ($result[$unit->measure_unit_id] + $unit->$valueAttribute) : $unit->$valueAttribute;
            }
        }
        return $result;
    }

    public function getAllWorkers()
    {
        return User::find()->andFilterWhere(['id' => $this->worker_id])->all();
    }

    public function getMadeInMinute()
    {
        $result = [];
        $hours = $this->totalHours;
        foreach ($this->totalMade as $key => $value) {
            $result[$key] = $hours ? $value / ($hours * 60) : 0;
        }
        return $result;
    }

    public function setWorker_hours($value)
    {
        foreach ($value as $worker_id => $types) {
            foreach ($this->workers as $worker) {
                if($worker->id === $worker_id) {
                    foreach ($types as $type => $count) {
                        $worker->{'hours_'.$type} = (int)$count;
                    }
                    $this->modelsToSave[] = $worker;
                    break;
                }
            }
        }
    }

    public function setWorker_units($value)
    {
        foreach ($value as $worker_id => $units) {

            foreach ($this->workers as $worker) {
                if($worker->id === $worker_id) {
                    foreach ($units as $unit_id => $types) {
                        foreach ($worker->units as $unit) {
                            if($unit->id === $unit_id) {
                                foreach ($types as $type => $count) {
                                    $unit->{'value_'.$type} = (int)$count;
                                }
                                $this->modelsToSave[] = $unit;
                                break;
                            }
                        }
                    }
                    break;
                }
            }
        }
    }
}