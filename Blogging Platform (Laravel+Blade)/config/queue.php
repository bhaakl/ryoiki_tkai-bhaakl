<?php

return [

   /*
    |--------------------------------------------------------------------------
    | Название соединения Queue по умолчанию
    |--------------------------------------------------------------------------
    |
    | API очередей Laravel поддерживает множество бэкендов через единый
    | API, предоставляя удобный доступ к каждому бэкенду с помощью
    | одного и того же синтаксиса для каждого из них. 
    |
    */

    // 'default' => env('QUEUE_CONNECTION', 'redis'),

    /*
    |--------------------------------------------------------------------------
    | Соединения Queue 
    |--------------------------------------------------------------------------
    |
    | Здесь можно настроить информацию о подключении для каждого сервера, который
    | используется приложением. Конфигурация по умолчанию была добавлена
    | для каждого бэкэнда, поставляемого с Laravel.
    |
    */

    'connections' => [

        'database' => [
            'driver' => 'database',
            'table' => 'jobs',
            'queue' => 'default',
            'retry_after' => 90,
            'after_commit' => false,
        ],

        // 'redis' => [
        //     'driver' => 'redis',
        //     'connection' => 'default',
        //     'queue' => env('REDIS_QUEUE', 'default'),
        //     'retry_after' => 90,
        //     'block_for' => null,
        //     'after_commit' => false,
        // ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Пакетирование заданий
    |--------------------------------------------------------------------------
    |
    | Следующие параметры настраивают базу данных и таблицу, в которых хранится информация о заданиях
    | пакетной обработки информации. Эти параметры могут быть обновлены для любой базы данных
    | соединение и таблицу, которые были определены в приложении.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'mysql'),
        'table' => 'job_batches',
    ],

   /*
    |--------------------------------------------------------------------------
    | Неудачные задания очереди
    |--------------------------------------------------------------------------
    |
    | Эти параметры настраивают поведение регистрации неудачных заданий в очереди, чтобы контролировать, какая база данных и таблица используется для хранения заданий.
    | можно контролировать, какая база данных и таблица будут использоваться для хранения заданий, которые
    | потерпели неудачу. Они могут быть изменены на любую базу данных / таблицу по желанию.
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'mysql'),
        'table' => 'failed_jobs',
    ],

];
